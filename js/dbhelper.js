class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(t){var e=idb.open("restaurantsDB",1,function(t){t.createObjectStore("restaurants",{keyPath:"id"})});e.then(function(e){fetch(DBHelper.DATABASE_URL).then(t=>t.json()).then(function(n){var o=n,r=e.transaction("restaurants","readwrite").objectStore("restaurants");o&&o.forEach(function(t){r.put(t)}),t(null,o)}).catch(t=>console.log(t)).then(function(){e.transaction("restaurants","readonly").objectStore("restaurants").getAll().then(function(e){t(null,e)}).catch(e=>t(e,null))})}),e.catch(function(e){console.log(e),t(e,null)})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((n,o)=>{if(n)e(n,null);else{const n=o.find(e=>e.id==t);n?e(null,n):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((n,o)=>{if(n)e(n,null);else{const n=o.filter(e=>e.cuisine_type==t);e(null,n)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((n,o)=>{if(n)e(n,null);else{const n=o.filter(e=>e.neighborhood==t);e(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,n){DBHelper.fetchRestaurants((o,r)=>{if(o)n(o,null);else{let o=r;"all"!=t&&(o=o.filter(e=>e.cuisine_type==t)),"all"!=e&&(o=o.filter(t=>t.neighborhood==e)),n(null,o)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,n)=>{if(e)t(e,null);else{const e=n.map((t,e)=>n[e].neighborhood),o=e.filter((t,n)=>e.indexOf(t)==n);t(null,o)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,n)=>{if(e)t(e,null);else{const e=n.map((t,e)=>n[e].cuisine_type),o=e.filter((t,n)=>e.indexOf(t)==n);t(null,o)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph}`+".jpg"}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}static fetchReviewsForRestaurant(t,e,n){idb.open("reviewsDB",1,function(t){t.createObjectStore("reviewsStore",{keyPath:"id"})}).then(function(o){fetch(t+"?restaurant_id="+e).then(t=>t.json()).then(function(t){let e=o.transaction("reviewsStore","readwrite").objectStore("reviewsStore");t.forEach(t=>{e.put(t).catch(t=>console.log(t))}),n(t)}).catch(function(t){console.log(t),o.transaction("reviewsStore","readonly").objectStore("reviewsStore").getAll().then(function(t){n(t)}).catch(function(t){console.log(t),n(!1)})})})}static submitReviewsSavedUntilOnline(){let t=idb.open("postLaterDB",1,function(t){t.createObjectStore("laterStore")});t.then(function(t){let e=[];t.transaction("laterStore","readwrite").objectStore("laterStore").getAll().then(function(n){n.forEach(async function(n){await fetch("http://localhost:1337/reviews/",{method:"post",body:n}).then(t=>t.json()).then(function(t){e.push(n.comments)}).catch(function(){console.log("could still not post...")}),e.forEach(function(e){t.transaction("laterStore","readwrite").objectStore("laterStore").delete(e).then(t=>console.log("")).catch("not deleted...")})})}).catch(t=>console.log("nothing from store to post now..."))}),t.catch(t=>console.log("could not open db..."))}static uploadReviewLaterFromDB(t){let e=idb.open("postLaterDB",1,function(t){t.createObjectStore("laterStore")});e.then(function(e){e.transaction("laterStore","readwrite").objectStore("laterStore").put(t,t.comments)}),e.catch(t=>{console.log(t),console.log("this should not happen...")})}static putReviewInNormalDB(t){idb.open("reviewsDB",1,function(t){t.createObjectStore("reviewsStore")}).then(function(e){console.log("should add to normal db..."),e.transaction("reviewsStore","readwrite").objectStore("reviewsStore").put(t)})}}